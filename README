Prerequisites
-------------

  Windows:
    64-bit machine (required by the 64-bit toolchain)
    MinGW/MSYS (normal 32-bit install)
    Add 64-bit toolchain:
      get x86_64-w64-mingw32-gcc-4.7.0-3_rubenvb.7z
      extract to c:\mingw64, so that you have /c/mingw64/bin/gcc.exe, etc.
    wget (mingw-get install msys-wget)
    patch (mingw-get install msys-patch)
    zip (mingw-get install msys-zip)
    bison (mingw-get install msys-bison)
    flex (mingw-get install msys-flex)
    perl (mingw-get install msys-perl, NOT ActiveState perl!)
    Use an MSYS shell when building modules

  Mac:
    64-bit machine (even though universal binaries are produced)
    Xcode

  Ensure you have access to create and/or write to the /psidepsbase directory.
  All modules are configured to use a prefix within that directory, and "sudo"
  is not used when running "make install" operations. It should be enough to
  create the directory in advance with correct permissions.

  NOTE: it is assumed that the root mount device is C:\MinGW\msys\1.0

Building a module
-----------------

  cd module_name
  make
 
  That's it. If all goes well, you'll end up with some archive file.

Available modules
-----------------

  Note: modules may depend on other modules. In this case, you'll just need to
  have built the dependency modules first.

  zlib - windows only.
  openssl - windows only. depends on zlib.
  aspell - windows only.
  gstbundle - windows and mac. windows version depends on zlib.
  qca - windows and mac. depends on qt and openssl. for windows, see below
    about qt vars.

Windows and Qt
--------------

Your Qt may be installed anywhere, and so you need to supply 2 environment
variables:

  QTDIR64 - location of 64-bit Qt using native path format with forward slashes
  QTDIR32 - location of 32-bit Qt using native path format with forward slashes

For example:

  cd qca
  QTDIR64=c:/qt/4.8.2-w64 QTDIR32=c:/qt/4.8.2 make

How it works
------------

Only packages not already built within a module will be built when "make" is
run. If a package fails to build, the build process will refuse to continue
until you fix the problem.

For each package to be built:
  1) a "build/{package/arch name}" directory is created as a workspace
  2) the package is attempted to be built, and installed into the prefix
  3) on success, a "build/{package/arch name}/ok" file is touched

The build script will only build a package if the "build/{package/arch name}"
directory does not exist, and it will only advance to the next package if the
directory exists and it contains an "ok" file.
